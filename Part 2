// ***************************************************************************************************************
// Course: TCP1101 PROGRAMMING FUNDAMENTALS                                                                      *
// Year  : Trimester 1, 2022/23 (T2215)                                                                          *    
// Lab   : TT1L                                                                                                  *
// Names : YASMIN IRDINA BINTI ZULKIPPLI |    AIDA MAISARAH BINTI HISAM  | ADLIN SOFEA BINTI ADAM SAFFIAN  |     *
// IDs   :        1221302357             |            1211103282         |          1211103656             |     *
// Emails: 1221302357@student.mmu.edu.my | 1211103282@student.mmu.edu.my | 1211103656@student.mmu.edu.my   |     *  
// Phones:        0123053403             |            01119534599        |          0192834238             |     *
// ***************************************************************************************************************

// #include "pf/helper.h"
#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include <map>
#include <cmath>
#include <limits>
#include <numeric>
#include <algorithm>

using namespace std;

int column = 5;
int row = 5;
int numofZombie = 1;
int alienLife_ = (rand() % 26 + 10) * 5;
int alienAttack_ = 0;

class Gameboard
{
private:
    vector<vector<char>> map_;
    char alien = 'A';
    char trail = '.';
    int dimX_, dimY_;
    char arrowup = '^';
    char arrowright = '>';
    char arrowdown = 'v';
    char arrowleft = '<';
    vector<pair<int, int>> trapPositions_;
    int numofTraps_; 
    
    int numPods_;
    int numHealthPacks_;
    int numRocks_;
    int numTraps_;
    int zombieLife_;
    int zombieAttack_;
    int zombieRange_;

public:
    Gameboard(int dimX = column, int dimY = row, int zombie = numofZombie);
    void init(int dimX, int dimY);
    void zinit(int dimX, int dimY, int zombie);
    void display();
    void displaydefaultSettings();
    void displayMainMenu();
    void howtoplay();
    void command(int row, int column);
    void AlienAttributes();
    void ZombieAttributes(int numofZombie);
    void movez(int row, int column, int numofZombie); char getRandomZombie(); 
    void save_game(const vector<vector<char>>& map_, int dimY_, int dimX_, const int alienLife_, const int alienAttack_, const int zombieLife_, const int zombieAttack_, const int zombieRange_, const int numOfZombie, const string& saveFileName);
    void load_game(string fileName);
    char getObject(vector< vector<char> > map_, int x, int y);
    int findObjectRow(int row, int column, int object); int findObjectColumn(int row, int column, int object);
    void tinit(int dimX, int dimY);
    void encounter(char object); double calculateDistance(int x1, int y1, int x2, int y2);
    void cdarrow(vector<vector<char>>& map_, int row, int column); void deleteTrail();
    struct ZombieData
    { char zombie; pair<int, int> coordinates;  }; ZombieData getZombieData(char object);

    void about();
};

Gameboard::Gameboard(int dimX, int dimY, int zombie)
{
    init(dimX, dimY);
    zinit(dimX, dimY, zombie);
    tinit(dimX, dimY);

    srand(time(0));
    alienAttack_ = 0;

}

void Gameboard::init(int dimX, int dimY)
{
    dimX_ = column;
    dimY_ = row;

    char objects[] = {' ', ' ', ' ', 'R', 'H', 'P', '>', '<', '^', 'v'};
    int noOfObjects = 10; 

    map_.resize(dimY_); 
    for (int i = 0; i < dimY_; ++i)
    {
        map_[i].resize(dimX_); // resize each row
    }
    // put random characters into the vector array
    for (int i = 0; i < dimY_; ++i)
    {
        for (int j = 0; j < dimX_; ++j)
        {
            int objNo = rand() % noOfObjects;
            map_[i][j] = objects[objNo];
        }
    }
    int midR = row / 2;
    int midC = column / 2;

    map_[midR][midC] = 'A';
}

void Gameboard::zinit(int dimX, int dimY, int zombie)
{
    dimX_ = column;
    dimY_ = row;
    zombie = numofZombie;
    char zombies[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    int noOfObjects = 9;

    for (int z = 1; z <= numofZombie; ++z)
    {
        int xdim = rand() % column;
        int ydim = rand() % row;
        map_[xdim][ydim] = zombies[z];
    }
}

void Gameboard::tinit(int dimX, int dimY)
{
    dimX_ = dimX;
    dimY_ = dimY;
    numofTraps_ = rand() % 3 + 1; // generate random number between 1 and 3
    char traps[] = {'T'};
    int noOfObjects = 1;

    for (int t = 0; t < numofTraps_; ++t)
    {
        int xdim = rand() % dimX_;
        int ydim = rand() % dimY_;
        if (map_[xdim][ydim] == ' ')
        {
            map_[xdim][ydim] = traps[rand() % noOfObjects];
            trapPositions_.push_back(make_pair(xdim, ydim)); // add trap position to vector
        }
        else
        {
            t--;
        }
    }
}

void Gameboard::cdarrow(vector<vector<char>>& map_, int row, int column)
{
    char direction;
    cout << "\nEnter the row and column of the arrow you want to change ";
    cout << "\nRow=> " << endl; cin >> row;
    cout << "\ncolumn=>  " << endl; cin >> column;
    cout << "\nEnter the direction you want to change the symbol to (e.g. '<', '^', '>', 'v'): ";
    cin >> direction;
    map_[row][column] = direction;
}

char Gameboard::getObject(vector< vector<char> > map_, int x, int y)
{
    char object = map_[y - 1 ][x - 1];
    
    return object;
}

double Gameboard::calculateDistance(int x1, int y1, int x2, int y2)
{ return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2)); }

int Gameboard::findObjectRow(int row, int column, int object)
{
    bool found = false; int board[row][column] = {{0}};
    for (row = 0; row < 5 && !found; row++)
    {   for (column = 0; column < 5 && !found; column++)
        {   if (board[row][column] == object)
            { found = true; }
        } 
    }
    
    if (found)
    { return row-1; }
    
    else
    { return -1; }
}

int Gameboard::findObjectColumn(int row, int column, int object)
{
    bool found = false; int board[row][column] = {{0}};
    for (row = 0; row < 5 && !found; row++)
    {   for (column = 0; column < 5 && !found; column++)
        {   if (board[row][column] == object)
            { found = true; }
        } 
    }
    
    if (found)
    { return column-1; }
    
    else
    { return -1; }
}

void Gameboard::AlienAttributes()
{
    cout << "Alien   : Life " << alienLife_ << ", Attack " << alienAttack_ << endl;
}

void Gameboard::ZombieAttributes(int numOfZombie)
{
    for (int i = 0; i < numOfZombie; ++i)
    {
        zombieLife_ = (rand() % 7 + 9) * 5; 
        zombieAttack_ = (rand() % 11) * 5; 
        zombieRange_ = (rand() % 10) + 1;
        
        cout << "Zombie " << i + 1 << ": ";
        cout << "Life " << zombieLife_ << ", Attack " << zombieAttack_ << ", Range " << zombieRange_ << endl;
    }
}
void Gameboard::save_game(const vector<vector<char>>& map_, int dimY_, int dimX_, const int alienLife_, const int alienAttack_, const int zombieLife_, const int zombieAttack_, const int zombieRange_, int numOfZombie, const string& saveFileName) 
{
    string fileName;
    cout << "Type in filename:" << endl;
    cin >> fileName;

    ofstream file(fileName + ".txt");

    file << endl;
    file << "------------------------------------" << endl;
    file << "      <<<:Alien VS Zombie:>>> " << endl;
    file << "------------------------------------" << endl;
    file << endl;

    // for each row
    for (int i = 0; i < dimY_; ++i) {
        // display upper border of the row
        file << " ";
        for (int j = 0; j < dimX_; ++j) {
            file << "+-";
        }
        file << "+" << endl;

        // display row number
        file << setw(1) << (dimY_ - i);

        // display cell content and border of each column
        for (int j = 0; j < dimX_; ++j) {
            file << "|" << map_[i][j];
        }
        file << "|" << endl;
    }

    // display lower border of the last row
    file << " ";
    for (int j = 0; j < dimX_; ++j) {
        file << "+-";
    }
    file << "+" << endl;

    // display column number
    file << " ";
    for (int j = 0; j < dimX_; ++j) {
        int digit = (j + 1) / 10;
        file << " ";
        if (digit == 0)
            file << " ";
        else
            file << digit;
    }
    file << endl;
    file << " ";
    for (int j = 0; j < dimX_; ++j) 
    {
        file << " " << (j + 1) % 10;
    }
    file << endl << endl;

    file << "Alien   : Life " << alienLife_ << ", Attack " << alienAttack_ << endl;

    for (int i = 0; i < numOfZombie; i++) 
    {
        file << "Zombie " << i + 1 << ": ";
        file << "Life " << zombieLife_ << ", Attack " << zombieAttack_ << ", Range " << zombieRange_ << endl;
    }

    file.close();
    cout << "Game Saved" << endl;
}

void Gameboard::load_game(string fileName) 
{
    // Check if the file name ends with ".txt"
    if (fileName.size() < 4 || fileName.substr(fileName.size() - 4) != ".txt") 
    {
        fileName += ".txt";
    }

    ifstream file(fileName);
    if (!file) 
    {
        cout << "Could Not Open File: " << fileName << endl;
        return;
    }

    string line;
    int row = 0, col = 0;
    vector<vector<char>> newMap;
    int newDimY = 0, newDimX = 0;
    int newAlienLife = 0, newAlienAttack = 0;
    int newZombieLife = 0, newZombieAttack = 0, newZombieRange = 0;
    int newNumOfZombie = 0;

    while (getline(file, line)) 
    {
        if (line.empty()) 
        {
            continue;
        }

        if (row == 0) 
        {
            row++;
            continue;
        }

        if (row == 1) 
        {
            istringstream iss(line);
            iss.ignore(2);
            iss >> newDimY >> newDimX;
            newMap = vector<vector<char>>(newDimY, vector<char>(newDimX, ' '));
            row++;
            continue;
        }

        if (row >= 2 && row <= newDimY + 1) 
        {
            for (col = 0; col < newDimX; col++) {
                newMap[row - 2][col] = line[col * 2 + 1];
            }
            row++;
            continue;
        }

        istringstream iss(line);
        string label;
        iss >> label;

        if (label == "Alien") 
        {
            iss.ignore(3); // ignore " : Life "
            iss >> newAlienLife;
            iss.ignore(9); // ignore ", Attack "
            iss >> newAlienAttack;
        } 
        else if (label == "Zombie") 
        {
            int zombieIndex;
            iss >> zombieIndex;
            iss.ignore(2); // ignore ": "
            iss.ignore(5); // ignore "Life "
            iss >> newZombieLife;
            iss.ignore(9); // ignore ", Attack "
            iss >> newZombieAttack;
            iss.ignore(8); // ignore ", Range "
            iss >> newZombieRange;
            newNumOfZombie++;
        } 
        else 
        {
            continue;
        }
    }

    map_ = newMap;
    dimY_ = newDimY;
    dimX_ = newDimX;
    alienLife_ = newAlienLife;
    alienAttack_ = newAlienAttack;
    zombieLife_ = newZombieLife;
    zombieAttack_ = newZombieAttack;
    zombieRange_ = newZombieRange;
    numofZombie = newNumOfZombie;

    display();

    file.close();
    cout << endl << "<<Game Loaded>>" << endl << endl;
}

char Gameboard::getRandomZombie()
{
    srand(time(NULL));
    vector<char> zombies = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    int index;

    // loop to select random zombies
    for (int i = 0; i < numofZombie; i++) 
    { index = rand() % (zombies.size() < numofZombie); }

    // return the last selected zombie
    return zombies[index];
}

Gameboard::ZombieData Gameboard::getZombieData(char object)
{
    vector<pair<int, int>> coordinates; 
    char randomObject = getRandomZombie(); 

    for (int r = 0; r < row; r++)
    {
        for (int c = 0; c < column; c++)
        {
            if (map_[r][c] == '1')
            {
                coordinates.push_back(make_pair(r, c));
            }
        }
    }

    ZombieData data;
    data.coordinates = coordinates[2];
    return data;
}

void Gameboard::encounter(char object)
{
    Gameboard g;
    
    switch (object)
    {
        case 'H':
        { 
            cout << endl;
            cout << endl << "<<Health Pack Is Detected!>>" << endl;
            cout << "Alien Finds A Health Pack." << endl;
            cout << "Alien's Life Is Increased By 20.\n" << endl;
            alienLife_ += 20;
            cout << "\n" << endl;
            break;
        }

        case 'P':
        {
            cout << endl;
            cout << endl << "<<A Pod Is Detected!>>" << endl;
            cout << "Alien Finds A Pod." << endl;

          int nearestZombie = -1;
          double nearestDistance = numeric_limits<double>::max();

         for (int i = 0; i <= numofZombie; ++i) 
         {
           char zombies[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
           int zrow = findObjectRow(row, column, zombies[i]);
           int zcolumn = findObjectColumn(row, column, zombies[i]);
        
           double distance = calculateDistance(column, row, zcolumn, zrow);
           if (distance < nearestDistance)
           { nearestZombie = i; nearestDistance = distance; }
         }

         if (nearestZombie != -1) 
         {
           g.ZombieAttributes(nearestZombie);
           zombieLife_ -= 10;
           cout << "Nearest Zombie's Life Decreased By 10." << endl;
         } 
         else 
         { cout << endl << "<<No Zombie Nearby>>" << endl; }

         break;
        }

        case 'T':
        {
            cout << endl;
            cout << endl << "<<A Trap Is Detected!>>" << endl;
            cout << "Alien Triggers The Trap." << endl;
            cout << "Alien's Life Is Decreased By 10.\n" << endl;
            alienLife_ -= 10;
            break;
        }

        default:
        { 
            cout << endl;
            cout << endl << "<<Arrow Is Detected!>>" << endl;
            cout << "Alien Finds An Arrow." << endl;
            cout << "Alien's Attack Is Increased By 20.\n" << endl;
            alienAttack_ += 20;
            break;
        }
    }
}

void Gameboard::movez(int row, int column, int numofZombie)
{
    Gameboard g;
    
    srand(time(NULL));
    int xdim = rand() % column;
    int ydim = rand() % row;
    int x = xdim;
    int y = ydim;

    char randomObject = g.getRandomZombie();
    ZombieData data = g.getZombieData(randomObject);

    char zombie = data.zombie;

    int x1 = data.coordinates.first;
    int y1 = data.coordinates.second;

    int old_y = y1; int old_x = x1;

    map_[old_y][old_x] = '.';
    map_[y][x] = randomObject;

    cout << "Moved "<< randomObject << " From (" << old_x << ", " << old_y << ")" << " to (" << x << ", " << y << ")" << endl;
}

void Gameboard::deleteTrail()
{ for (int r = 0; r <= row; r++)
    { for (int c = 0; c <= column; c++)
        { if (map_[r][c] == '.')
            { map_[r][c] = ' '; }
        }
    }
}

void Gameboard::command(int row, int column)
{
    string command;
    int dimx;
    int dimy;
    int mapCols;
    int mapRows;
    int zombies;
    char quit;
    char save; 
    int alienLife;
    int alienAttack;
    int zombieLife;
    int zombieAttack;
    int zombieRange;
    string fileName;
    string saveFileName;
    Gameboard g;

    int midR = row / 2;
    int midC = column / 2;
    map_[midR][midC] = alien;

    cout << "Are You Ready To Play ? (y/n) = ";
    cin >> command;

    if (command == "y" || command == "Y")
    { while (midR >= 0 && midR < row && midC >= 0 && midC < column && alienLife_ > 0)
      {
        cout << "\nEnter Your Command : "; cin >> command;

        if (command == "left" || command == "Left")
        { system("cls"); display();
          for (int c = midC; c > 0; c--)
          { map_[midR][midC] = trail; midC -= 1;

            if (map_[midR][midC] == 'H')
            { encounter('H'); }
                    
            else if (map_[midR][midC] == 'P')
            { encounter('P'); }
                    
            else if (map_[midR][midC] == 'R')
            { cout << endl << "<<Rock Is Detected!>>" << endl << endl; cout << "Alien Finds A Rock." << endl;
              system("pause");

              int random = rand() % 2;
              if (random == 0) { encounter('P'); }
              else { encounter('H'); }

              break;
            }

            else if (map_[midR][midC] == 'T')
            { encounter('T'); }
                    
            else if (map_[midR][midC] == '^' || map_[midR][midC] == 'v' || map_[midR][midC] == '<' || map_[midR][midC] == '>')
            { encounter('A'); }
                    
            map_[midR][midC] = alien;
            system("pause"); system("cls");
            display();
          }
        }

        else if (command == "right" || command == "Right")
        { system("cls"); display();
          for (int c = midC; c < column; c++)
          { map_[midR][midC] = trail; midC += 1;
                    
            if (map_[midR][midC] == 'H')
            { encounter('H'); }
                    
            else if (map_[midR][midC] == 'P')
            { encounter('P'); }
                    
            else if (map_[midR][midC] == 'R')
            { cout << endl << "<<Rock Is Detected!>>" << endl << endl; cout << "Alien Finds A Rock." << endl;
              system("pause");

              int random = rand() % 2;
              if (random == 0) { encounter('P'); }
              else { encounter('H'); }

              break;
            }

            else if (map_[midR][midC] == 'T')
            { encounter('T'); }
                    
            else if (map_[midR][midC] == '^' || map_[midR][midC] == 'v' || map_[midR][midC] == '<' || map_[midR][midC] == '>')
            { encounter('A'); }
                    
            map_[midR][midC] = alien;
            system("pause"); system("cls");
            display();
          }
        }
            
        else if (command == "up" || command == "Up")
        { system("cls"); display();
          for (int r = midR; r > 0; r--)
          { map_[midR][midC] = trail; midR -= 1;
                    
            if (map_[midR][midC] == 'H')
            { encounter('H'); }
                    
            else if (map_[midR][midC] == 'P')
            { encounter('P'); }
                    
            else if (map_[midR][midC] == 'R')
            { cout << endl << "<<Rock Is Detected!>>" << endl << endl; cout << "Alien Finds A Rock." << endl;
              system("pause");

              int random = rand() % 2;
              if (random == 0) { encounter('P'); }
              else { encounter('H'); }

              break;
            }

            else if (map_[midR][midC] == 'T')
            { encounter('T'); }
                    
            else if (map_[midR][midC] == '^' || map_[midR][midC] == 'v' || map_[midR][midC] == '<' || map_[midR][midC] == '>')
            { encounter('A'); }
                    
            map_[midR][midC] = alien;
            system("pause"); system("cls");
            display();
          }
        }
            
        else if (command == "down" || command == "Down")
        { system("cls"); display();
        for (int r = midR; r < row; r++)
          { map_[midR][midC] = trail; midR += 1;
                    
            if (map_[midR][midC] == 'H')
            { encounter('H'); }
                    
            else if (map_[midR][midC] == 'P')
            { encounter('P'); }
                    
            else if (map_[midR][midC] == 'R')
            { cout << endl << "<<Rock Is Detected!>>" << endl << endl; cout << "Alien Finds A Rock." << endl;
              system("pause");

              int random = rand() % 2;
              if (random == 0) { encounter('P'); }
              else { encounter('H'); }

              break;
            }

            else if (map_[midR][midC] == 'T')
            { encounter('T'); }
                    
            else if (map_[midR][midC] == '^' || map_[midR][midC] == 'v' || map_[midR][midC] == '<' || map_[midR][midC] == '>')
            { encounter('A'); }
                    
            map_[midR][midC] = alien;
            system("pause"); system("cls");
            display();
          }
        }
            
        else if (command == "save" || command == "Save")
        {
            save_game(map_, dimY_, dimX_, alienLife_, alienAttack_, zombies, zombieLife_, zombieAttack_, zombieRange_, saveFileName);
        }

        else if (command == "load" || command == "Load")
        {
                cout << "Type In Filename: ";
                cin >> fileName;

                load_game(fileName);
                display();
        }

         else if (command == "arrow" || command == "Arrow")
        {
            system("cls"); display();
            
            cdarrow(map_, row, column);
        }

        else if (command == "help" || command == "Help")
        { g.howtoplay(); g.command(row,column); }

        else if (command == "quit" || command == "Quit")
        { 
            cout << endl;
            cout << "+---------------------------------------------+" << endl;
            cout << "|         Do You Really Wish To Quit ?        |" << endl;
            cout << "|=============================================|" << endl;
            cout << "| 1 => Yes                                    |" << endl;
            cout << "| 2 => No                                     |" << endl;
            cout << "+---------------------------------------------+" << endl;
            cout << endl;
            
            cout << "==> ";
            cin >> quit;
            quit = toupper(quit);
            cout << endl;
            switch (quit)
            {
                case '1':
                 cout << endl;
                 cout << "+---------------------------------------------+" << endl;
                 cout << "|      Do You Want To Save Your Progress ?    |" << endl;
                 cout << "|=============================================|" << endl;
                 cout << "| 1 => Yes                                    |" << endl;
                 cout << "| 2 => No                                     |" << endl;
                 cout << "+---------------------------------------------+" << endl;
                 cout << endl;
                
                 cout << "==> ";
                 cin >> save;
                 save = toupper(save);
                 cout << endl;
                 switch (save)
                 {
                    case '1':
                     save_game(map_, dimY_, dimX_, alienLife_, alienAttack_, zombies, zombieLife_, zombieAttack_, zombieRange_, saveFileName);
                     displayMainMenu();
                    
                    case '2':
                     displayMainMenu();
                     break;
                 }

                case '2':
                 cout << "Let's Continue!" << endl << "(Press Any Key and Enter To Continue)" << endl;
                 cin >> command; 
            }
        }

        else
        { cout << "Alien Tries To Get Out Of The Border" << endl; }

        system("cls"); display();
      }
    }
    
    else if (command == "n" || command == "N")
    { system("cls"); g.displayMainMenu(); }

    else
    { cout << "Wrong input! Please choose to input between y or n only." << endl; }
}

void Gameboard::howtoplay()
{
    system("cls");
    cout << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << "|                 How to Play ?               |" << endl;
    cout << "|=============================================|" << endl;
    cout << "| These Are The Commands That You Can Use     |" << endl;
    cout << "|          While Playing The Game !           |" << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << "| Command |            Function               |" << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << "| up      | Move Your Alien Upwards           |" << endl;
    cout << "| down    | Move Your Alien Downwards         |" << endl;
    cout << "| left    | Move Your Alien To The Left       |" << endl;
    cout << "| right   | Move Your Alien To The Right      |" << endl;
    cout << "| arrow   | Change The Direction Of An Arrow  |" << endl;
    cout << "| help    | Display These Commands Again      |" << endl;
    cout << "| save    | Save Your Current Game Progress   |" << endl;
    cout << "| load    | Load Your Previously Saved Game   |" << endl;
    cout << "| quit    | Quit Your Current Game            |" << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << endl;

    system("pause");
    system("cls");
}

void Gameboard::display()
{

    system("cls");
    cout << endl;
    cout << "------------------------------------" << endl;
    cout << "        <<<:Alien VS Zombie:>>>     " << endl;
    cout << "------------------------------------" << endl;
    cout << endl;

    // for each row
    for (int i = 0; i < dimY_; ++i)
    {
        // display upper border of the row
        cout << " ";
        for (int j = 0; j < dimX_; ++j)
        {
            cout << "+-";
        }
        cout << "+" << endl;

        // display row number
        cout << setw(1) << (dimY_ - i);

        // display cell content and border of each column
        for (int j = 0; j < dimX_; ++j)
        {
            cout << "|" << map_[i][j];
        }
        cout << "|" << endl;
    }

    // display lower border of the last row
    cout << " ";
    for (int j = 0; j < dimX_; ++j)
    {
        cout << "+-";
    }
    cout << "+" << endl;

    // display column number
    cout << " ";
    for (int j = 0; j < dimX_; ++j)
    {
        int digit = (j + 1) / 10;
        cout << " ";
        if (digit == 0)
            cout << " ";
        else
            cout << digit;
    }
    cout << endl;
    cout << " ";
    for (int j = 0; j < dimX_; ++j)
    {
        cout << " " << (j + 1) % 10;
    }
    cout << endl << endl;

    AlienAttributes();
    ZombieAttributes(numofZombie);
}

void Gameboard::displayMainMenu()
{
    char choice;
    string fileName;

    cout << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << "|                ~~  Welcome ~~               |" << endl;
    cout << "|=============================================|" << endl;
    cout << "| Select:                                     |" << endl;
    cout << "|                                             |" << endl;
    cout << "| 1 => New Game                               |" << endl;
    cout << "| 2 => Continue Your Last Game                |" << endl;
    cout << "| 3 => How to Play ?                          |" << endl;
    cout << "| 4 => About Us                               |" << endl;
    cout << "|---------------------------------------------|" << endl;
    cout << "| 5 => Quit                                   |" << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << endl;

    cout << "Your Choice => ";
    cin >> choice;
    choice = toupper(choice);
    cout << endl;
    switch (choice)
    {
    case '1':
        displaydefaultSettings();
        break;
    case '2':
        {
        cout << "Type In Filename: ";
        cin >> fileName;

        load_game(fileName);
        display(); 
        }   
    case '3':
        howtoplay();
        displayMainMenu();
    case '4':
        about();
        displayMainMenu();
    case '5':
        cout << "Do Come And Play Again!";
        break;
    }
};

void Gameboard::about()
{
    system("cls");
    cout << endl;
    cout << "+----------------------------------------------+" << endl;
    cout << "|                [  About Us  ]                |" << endl;
    cout << "|==============================================|" << endl;
    cout << "| started as normal 3 kids, who has never met  |" << endl;
    cout << "| despite being in the same lab group, we then |" << endl;
    cout << "| form an alliance to build this game together |" << endl;
    cout << "|      under the care of Dr Wong Ya Ping.      |" << endl;
    cout << "| with that, we hope you will enjoy this game. |" << endl;
    cout << "|       let's play this game, let's play,      |" << endl;
    cout << "|                                              |" << endl;
    cout << "|                Alien VS Zombie               |" << endl;
    cout << "|==============================================|" << endl;
    cout << "| Special Thanks To Sir William! Thankyou Sir! |" << endl;
    cout << "+----------------------------------------------+" << endl;
    cout << endl;

    system("pause");
    system("cls");
}

void Gameboard::displaydefaultSettings()
{
    char yesorno;

    system("cls");
    cout << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << "|            Default Game Settings            |" << endl;
    cout << "|=============================================|" << endl;
    cout << "| Board Rows    : " << setw(3) << row << "                         |" << endl;
    cout << "|---------------------------------------------|" << endl;
    cout << "| Board Columns : " << setw(3) << column << "                         |" << endl;
    cout << "|---------------------------------------------|" << endl;
    cout << "| Zombie Count  : " << setw(3) << numofZombie << "                         |" << endl;
    cout << "+---------------------------------------------+" << endl;
    cout << endl;

    cout << "Do You Want To Change The Settings ? (y/n) = ";
    cin >> yesorno;

    if (yesorno == 'y')
    {
        system("cls");
        cout << "\nEnter Number Of Rows = ";
        cin >> row;
        while (row % 2 == 0)
        {
            cout << "\nInvalid Number! Please Enter Odd Numbers Only" << endl;
            cout << "Enter Number Of Rows =  ";
            cin >> row;
        }

        cout << "\nEnter Number Of Column = ";
        cin >> column;
        while (column % 2 == 0)
        {
            cout << "\nInvalid number! Please Enter Odd Numbers Only" << endl;
            cout << "Enter Number Of Column = ";
            cin >> column;
        }

        cout << "\nEnter Number Of Zombie(s) = ";
        cin >> numofZombie;
        while (numofZombie > 9)
        {
            cout << "\nInvalid! You Can Only Have At Most 9 Zombies" << endl;
            cout << "Enter Number Of Zombie(s) = ";
            cin >> numofZombie;
        }

        system("cls");
        cout << "Let's Play The Game !!" << endl;
        init(column, row);
        zinit(column, row, numofZombie);
        displaydefaultSettings();
    }

    else if (yesorno == 'n')
    {
        cout << "Let's Play The Game !!" << endl;
        display();
    }

    else
    {
        cout << "Invalid Input !" << endl;
        displaydefaultSettings();
    }
}

int main()
{
    Gameboard g;

    cout << "Assignment (Part 2)" << endl;
    cout << "Let's Get Started!" << endl;
    // pf::Pause();

    srand(time(NULL));
    g.displayMainMenu();
    g.command(row, column); 
    g.display();
}
